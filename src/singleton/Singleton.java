package singleton;

public class Singleton {
	//	持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载
	private static Singleton instance = null;
	
	//私有构造，防止被实例化
	private Singleton(){
		
	}
	
	/**
	 * 静态工程方法，创建实例
	 * @return
	 */
/*	public static Singleton getInstance(){
		if(instance == null){
			instance = new Singleton();
		}
		return instance;
	}*/
	
/*	public static synchronized Singleton getInstance(){
		if(instance == null){
			instance = new Singleton();
		}
		return instance;
	}
	*/
	
/*	public static Singleton getInstance(){
		if(instance == null){
			synchronized(instance){
				instance = new Singleton();
			}
		}
		return instance;
	}*/
	
	/**
	 * 使用一个内部类来维护单列
	 * @author zhuangsen
	 *
	 */
	private static class SingletonFactory{
		private static Singleton instance = new Singleton();
	}
	
	/**
	 * 获取实例
	 * @return
	 */
	public static Singleton getInstance(){
		return SingletonFactory.instance;
	}
	
	
	/**
	 * 如果该对象被用于序列化，可以保证对象在序列化前后保持一致
	 * @return
	 */
	public Object readResolve(){
		return instance;
	}
}
